import * as React from 'react';
import * as ReactDom from 'react-dom';
import { GoalsApi, Configuration, Goal } from '../autogenerated';
import { Container, Typography, TextField, Button, LinearProgress, Snackbar, AppBar, Toolbar, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';
import {Router, Switch, Route} from 'react-router-dom';
import history from './history';
import { Header } from './Header';
import {Me} from './types';

declare var process;
let api = new GoalsApi(
    new Configuration({
        basePath:process.env.BASE_PATH != null ? process.env.BASE_PATH  : location.origin
    })
);

if('serviceWorker' in navigator) 
{
    navigator.serviceWorker
    .register('./sw.ts')
    .then(function() { console.log('Service Worker Registered'); });
}

const GoalRow = ({goal, onClick}:{goal:Goal, onClick:(goal:Goal)=>any})=>{
  return (
    <div>
      <Typography onClick={()=>onClick != null ? onClick(goal) : undefined} color="textSecondary" style={{float:'left', cursor:'pointer', width:'32px'}}>
        {goal.id}
      </Typography>
      <Typography  align="left">
        {goal.description}
      </Typography>
    </div>
  )
}

const Index = ()=>
{
    const [me, setMe] = React.useState<Me>(null);
    const [goals, setGoals] = React.useState<Goal[]>([]);
    const [description, setDescription] = React.useState<string>("");
    const [refreshing, setRefreshing] = React.useState<boolean>(false);
    const [showAlert, setShowAlert] = React.useState<boolean>(false);
    
    const [log, setLog] = React.useState<string[]>(["first", "second"]);
    const refresh = async ()=>
    {
      try
      {
        setRefreshing(true);
        let e = await api.api1GoalsGet();
        setGoals(e);
        setDescription("");
        setRefreshing(false);
      }
      catch(e)
      {
        if (e.status == 401)
        {
          window.location.href = "/login";
        }
        setShowAlert(true);
        log.unshift(e);
      }
      finally
      {
        setRefreshing(false);
      }
    }

    React.useEffect(()=>
    {
      fetch('/api/1/me').then(async resp =>
      {
        setMe(await resp.json());
      });
      refresh();
      window.onfocus = ()=>refresh();
    }, [])

    const addGoal = async ()=>
    {
      await api.api1GoalsPost({
        postGoal:
        {
          description:description
        }
      });

      await refresh();
    }

    const deleteGoal = async (goal:Goal)=>
    {
      if (confirm("Do you wish to delete this goal?"))
      {
        await api.api1GoalsDelete({
          body:goal.id
        });

        await refresh();
      }
    };

    return (
        <Router history={history}>
          <Header refreshing={refreshing} me={me}/>
          <Container maxWidth="sm" style={{marginTop:'16px'}}>
            <Switch>
              <Route path="/log">
                <div>
                  <Typography variant="h6">Log</Typography>
                  {log.map((v,k)=><Typography key={k}>{v}</Typography>)}
                </div>
              </Route>
              <Route path="/">
                <div style={{display:'flex', marginBottom:24}}>
                  <TextField onKeyDown={(e)=>e.keyCode == 13 ? addGoal() : undefined} autoComplete="off" InputProps ={{readOnly:refreshing}} onChange={(e)=>setDescription(e.target.value)} value={description} style={{width:'100%', marginRight:16}} id="standard-basic" label="Description" />
                  <Button disabled={description == "" || refreshing} onClick={()=>addGoal()} variant="outlined">Insert</Button>
                </div>
                {goals.map((g, i)=>
                {
                  return (
                    <GoalRow onClick={deleteGoal} goal={g} key={i}/>
                  )
                })}
              </Route>
            </Switch>
          </Container>
          <Snackbar open={showAlert} autoHideDuration={3000} onClose={()=>setShowAlert(false)} >
            <Typography color="error">
              Failure to get goals!
            </Typography>
          </Snackbar>
        </Router>
      );
}


ReactDom.render(<Index/>, document.getElementById("main"));